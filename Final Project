import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.time.LocalDate;
import java.util.*;

/**
 * Author@ Illya Davydov
 * Inventory Management System with GUI
 * Features:
 * - Product and Order classes
 * - Inventory class to manage product storage and order list
 * - GUI (InventorySystemUI) using Swing
 * - Input validation and error handling
 */
public class InventorySystem {

    // -------------------- Product Class --------------------
    /**
     * Represents a product in inventory with ID, name, price, and stock.
     */
    static class Product {
        private String productId;
        private String name;
        private double price;
        private int stock;

        // Constructor to initialize Product
        public Product(String productId, String name, double price, int stock) {
            if (price < 0 || stock < 0)
                throw new IllegalArgumentException("Price and stock must be non-negative.");
            this.productId = productId;
            this.name = name;
            this.price = price;
            this.stock = stock;
        }

        // Getters
        public String getProductId() { return productId; }
        public String getName() { return name; }
        public double getPrice() { return price; }
        public int getStock() { return stock; }

        // Setters
        public void setStock(int stock) {
            if (stock < 0) throw new IllegalArgumentException("Stock must be non-negative.");
            this.stock = stock;
        }

        @Override
        public String toString() {
            return name + " (" + productId + ")";
        }
    }

    // -------------------- Order Class --------------------
    /**
     * Represents an order containing multiple product items and their quantities.
     */
    static class Order {
        private LocalDate orderDate;
        private Map<Product, Integer> items;

        // Constructor to initialize an Order
        public Order() {
            orderDate = LocalDate.now();
            items = new HashMap<>();
        }

        // Adds a product to the order
        public void addItem(Product p, int qty) {
            if (p == null || qty <= 0)
                throw new IllegalArgumentException("Invalid product or quantity.");
            items.put(p, items.getOrDefault(p, 0) + qty);
        }

        // Getters
        public LocalDate getOrderDate() { return orderDate; }

        // Total price of the order
        public double getTotalPrice() {
            return items.entrySet().stream()
                    .mapToDouble(e -> e.getKey().getPrice() * e.getValue()).sum();
        }

        // Get all items in the order
        public Map<Product, Integer> getItems() {
            return items;
        }

        @Override
        public String toString() {
            return "Order on " + orderDate + " | Total: $" + getTotalPrice();
        }
    }

    // -------------------- Inventory Class --------------------
    /**
     * Manages products using a HashMap and stores orders in a LinkedList.
     */
    static class Inventory {
        private Map<String, Product> productMap = new HashMap<>();
        private LinkedList<Order> orderList = new LinkedList<>();

        // Adds a product to the inventory
        public void addProduct(Product product) {
            if (product == null || productMap.containsKey(product.getProductId()))
                throw new IllegalArgumentException("Invalid or duplicate product.");
            productMap.put(product.getProductId(), product);
        }

        // Retrieves a product by its ID
        public Product getProductById(String id) {
            return productMap.get(id);
        }

        // Get all products in the inventory
        public Collection<Product> getAllProducts() {
            return productMap.values();
        }

        // Places an order
        public void placeOrder(Order order) {
            if (order == null) throw new IllegalArgumentException("Order cannot be null.");
            orderList.add(order);
        }

        // Get all orders placed
        public List<Order> getAllOrders() {
            return orderList;
        }
    }

    // -------------------- Inventory Report (Optional Console Use) --------------------
    static class InventoryReport {
        public static void printProductReport(Inventory inventory) {
            System.out.println("=== Product Report ===");
            for (Product p : inventory.getAllProducts()) {
                System.out.println(p);
            }
        }

        public static void printOrderReport(Inventory inventory) {
            System.out.println("=== Order Report ===");
            for (Order o : inventory.getAllOrders()) {
                System.out.println(o);
            }
        }
    }

    // -------------------- InventorySystemUI (GUI Class) --------------------
    /**
     * Provides a Swing GUI for interacting with the Inventory system.
     */
    static class InventorySystemUI extends JFrame {
        private Inventory inventory = new Inventory();           // Data store for products and orders
        private JComboBox<Product> productCombo;                // ComboBox for selecting product in order
        private JTextField qtyField;                            // Quantity input field
        private Order currentOrder = new Order();               // Current order being created

        // Table models for displaying data
        private DefaultTableModel productTableModel = new DefaultTableModel(new String[]{"ID", "Name", "Price", "Stock"}, 0);
        private DefaultTableModel orderTableModel = new DefaultTableModel(new String[]{"Date", "Total"}, 0);

        public InventorySystemUI() {
            setTitle("Inventory Management System");
            setSize(600, 400);
            setDefaultCloseOperation(EXIT_ON_CLOSE);
            setLocationRelativeTo(null); // Center window

            // Tabbed interface for navigation
            JTabbedPane tabs = new JTabbedPane();
            tabs.addTab("Add Product", createAddProductPanel());
            tabs.addTab("Place Order", createOrderPanel());
            tabs.addTab("Reports", createReportPanel());

            add(tabs);
            refreshData(); // Refresh data when GUI starts
            setVisible(true);
        }

        // -------------------- Add Product Panel --------------------
        /**
         * Panel for adding a new product to the inventory.
         */
        private JPanel createAddProductPanel() {
            JPanel panel = new JPanel(new GridLayout(5, 2)); // Grid layout for input fields
            JTextField idField = new JTextField();
            JTextField nameField = new JTextField();
            JTextField priceField = new JTextField();
            JTextField stockField = new JTextField();

            // Button to add product to inventory
            JButton addBtn = new JButton("Add Product");
            addBtn.addActionListener(e -> {
                // Trim and fetch input
                String id = idField.getText().trim();
                String name = nameField.getText().trim();
                String priceText = priceField.getText().trim();
                String stockText = stockField.getText().trim();

                // Validate inputs
                if (id.isEmpty() || name.isEmpty() || priceText.isEmpty() || stockText.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "All fields are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                if (!id.matches("[A-Za-z0-9]+")) {
                    JOptionPane.showMessageDialog(this, "Product ID must be alphanumeric.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try {
                    double price = Double.parseDouble(priceText);
                    int stock = Integer.parseInt(stockText);
                    if (price < 0 || stock < 0) {
                        JOptionPane.showMessageDialog(this, "Price and stock must be non-negative.", "Input Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    // Add product to inventory
                    inventory.addProduct(new Product(id, name, price, stock));
                    JOptionPane.showMessageDialog(this, "Product added.");
                    idField.setText(""); nameField.setText(""); priceField.setText(""); stockField.setText("");
                    refreshData();
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(this, "Price and stock must be valid numbers.", "Input Error", JOptionPane.ERROR_MESSAGE);
                } catch (IllegalArgumentException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Input Error", JOptionPane.ERROR_MESSAGE);
                }
            });

            // Layout components
            panel.add(new JLabel("Product ID:")); panel.add(idField);
            panel.add(new JLabel("Name:"));       panel.add(nameField);
            panel.add(new JLabel("Price:"));      panel.add(priceField);
            panel.add(new JLabel("Stock:"));      panel.add(stockField);
            panel.add(new JLabel());              panel.add(addBtn);
            return panel;
        }

        // -------------------- Place Order Panel --------------------
        /**
         * Panel for placing an order by selecting a product and entering quantity.
         */
        private JPanel createOrderPanel() {
            JPanel panel = new JPanel(new BorderLayout());
            JPanel topPanel = new JPanel();

            productCombo = new JComboBox<>();
            qtyField = new JTextField(5);
            JButton addBtn = new JButton("Add to Order");
            JButton placeBtn = new JButton("Place Order");

            // Add item to current order
            addBtn.addActionListener(e -> {
                Product selected = (Product) productCombo.getSelectedItem();
                String qtyText = qtyField.getText().trim();

                if (selected == null || qtyText.isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Select product and enter quantity.", "Input Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }

                try {
                    int qty = Integer.parseInt(qtyText);
                    if (qty <= 0) throw new NumberFormatException();
                    currentOrder.addItem(selected, qty);
                    JOptionPane.showMessageDialog(this, "Item added to order.");
                    qtyField.setText("");
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(this, "Quantity must be a positive integer.", "Input Error", JOptionPane.ERROR_MESSAGE);
                } catch (IllegalArgumentException ex) {
                    JOptionPane.showMessageDialog(this, "Error: " + ex.getMessage(), "Input Error", JOptionPane.ERROR_MESSAGE);
                }
            });

            // Finalize and save order
            placeBtn.addActionListener(e -> {
                if (currentOrder.getItems().isEmpty()) {
                    JOptionPane.showMessageDialog(this, "Order is empty.");
                    return;
                }
                inventory.placeOrder(currentOrder);
                currentOrder = new Order(); // Reset current order
                JOptionPane.showMessageDialog(this, "Order placed.");
                refreshData();
            });

            // Layout components
            topPanel.add(new JLabel("Product:"));
            topPanel.add(productCombo);
            topPanel.add(new JLabel("Quantity:"));
            topPanel.add(qtyField);
            topPanel.add(addBtn);
            topPanel.add(placeBtn);

            panel.add(topPanel, BorderLayout.NORTH);
            return panel;
        }

        // -------------------- Report Panel --------------------
        /**
         * Panel to display product and order reports in table format.
         */
        private JPanel createReportPanel() {
            JPanel panel = new JPanel(new GridLayout(2, 1));

            JTable productTable = new JTable(productTableModel);
            JTable orderTable = new JTable(orderTableModel);

            panel.add(new JScrollPane(productTable));
            panel.add(new JScrollPane(orderTable));

            return panel;
        }

        // -------------------- Refresh Data --------------------
        /**
         * Updates the product combo and table data after any change.
         */
        private void refreshData() {
            // Refresh product combo box
            productCombo.removeAllItems();
            for (Product p : inventory.getAllProducts()) {
                productCombo.addItem(p);
            }

            // Refresh product table
            productTableModel.setRowCount(0);
            for (Product p : inventory.getAllProducts()) {
                productTableModel.addRow(new Object[]{p.getProductId(), p.getName(), p.getPrice(), p.getStock()});
            }

            // Refresh order table
            orderTableModel.setRowCount(0);
            for (Order o : inventory.getAllOrders()) {
                orderTableModel.addRow(new Object[]{o.getOrderDate(), o.getTotalPrice()});
            }
        }

    }

    // -------------------- Main Method --------------------
    /**
     * The entry point to run the InventorySystem UI.
     */
    public static void main(String[] args) {
        SwingUtilities.invokeLater(InventorySystemUI::new); // Launch the GUI
    }
}
